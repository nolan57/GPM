using System;
using System.Windows;
using System.Windows.Media;
using GanttChartFramework.Models;
using GanttChartFramework.Views;
using GanttChartFramework.Services;

namespace GanttChartFramework.Sample
{
    /// <summary>
    /// Example demonstrating the improved multi-level time scale system
    /// </summary>
    public partial class ImprovedTimeScaleExample : Window
    {
        private readonly TimeScaleRenderingService _renderingService;
        private ImprovedMultiLevelTimeScaleTick _currentTick;

        public ImprovedTimeScaleExample()
        {
            InitializeComponent();
            _renderingService = new TimeScaleRenderingService();
            SetupExamples();
        }

        private void SetupExamples()
        {
            // Example 1: Simple configuration
            CreateSimpleExample();

            // Example 2: Custom configuration with themes
            CreateCustomThemeExample();

            // Example 3: Performance optimized batch creation
            CreateBatchExample();

            // Example 4: Dynamic reconfiguration
            CreateDynamicExample();
        }

        #region Example 1: Simple Configuration

        private void CreateSimpleExample()
        {
            // Create a simple time scale tick with default configuration
            var tick = new ImprovedMultiLevelTimeScaleTick
            {
                DateTime = DateTime.Now,
                Width = 100,
                Height = 60
            };\n\n            // The control automatically applies smart defaults\n            // based on the current date and context\n            _currentTick = tick;\n        }\n\n        #endregion\n\n        #region Example 2: Custom Theme Example\n\n        private void CreateCustomThemeExample()\n        {\n            // Create custom configuration\n            var config = new MultiLevelTimeScaleConfiguration\n            {\n                MaxRows = 2,\n                Orientation = System.Windows.Controls.Orientation.Vertical,\n                EnableSmartVisibility = true\n            };\n\n            // Customize specific time levels\n            var yearLevel = config.TimeLevels.First(l => l.Type == TimeLevelType.Year);\n            yearLevel.FontSize = 16;\n            yearLevel.Foreground = Brushes.Navy;\n            yearLevel.FontWeight = FontWeights.Bold;\n\n            var monthLevel = config.TimeLevels.First(l => l.Type == TimeLevelType.Month);\n            monthLevel.TextFormatter = dt => dt.ToString(\"MMMM yyyy\");\n            monthLevel.Foreground = Brushes.DarkRed;\n\n            // Create context for optimization\n            var context = new TimeScaleContext\n            {\n                StartDate = DateTime.Now,\n                EndDate = DateTime.Now.AddMonths(6),\n                AvailableWidth = 800,\n                AvailableHeight = 80,\n                ZoomLevel = 1.0\n            };\n\n            // Apply smart configuration based on context\n            config.OptimizeForContext(context);\n\n            // Create the control\n            var tick = new ImprovedMultiLevelTimeScaleTick\n            {\n                Configuration = config,\n                Context = context,\n                DateTime = DateTime.Now,\n                EnableAnimations = true,\n                Width = 100,\n                Height = 80\n            };\n\n            // Apply modern theme\n            tick.ApplyTheme(TimeScaleTheme.CreateModern());\n        }\n\n        #endregion\n\n        #region Example 3: Performance Optimized Batch Creation\n\n        private void CreateBatchExample()\n        {\n            var startDate = DateTime.Now;\n            var endDate = startDate.AddDays(30);\n            var interval = TimeSpan.FromDays(1);\n            var tickWidth = 60;\n\n            // Create multiple ticks efficiently using the rendering service\n            var ticks = _renderingService.CreateTimeScaleTicks(\n                startDate,\n                endDate, \n                interval,\n                tickWidth,\n                \"modern\" // Theme key\n            );\n\n            // The service automatically:\n            // - Reuses configurations where possible\n            // - Applies object pooling for controls\n            // - Optimizes visibility based on time span\n            // - Applies consistent theming\n\n            Console.WriteLine($\"Created {ticks.Count} optimized time scale ticks\");\n            \n            // Get memory usage stats\n            var stats = _renderingService.GetMemoryStats();\n            Console.WriteLine($\"Memory usage: {stats.FormattedMemoryUsage}\");\n        }\n\n        #endregion\n\n        #region Example 4: Dynamic Reconfiguration\n\n        private void CreateDynamicExample()\n        {\n            var tick = new ImprovedMultiLevelTimeScaleTick\n            {\n                DateTime = DateTime.Now,\n                Width = 80,\n                Height = 60,\n                EnableAnimations = true\n            };\n\n            // Dynamic level visibility changes\n            tick.SetLevelVisibility(\n                (TimeLevelType.Year, true),\n                (TimeLevelType.Month, true),\n                (TimeLevelType.Day, false),\n                (TimeLevelType.Time, false)\n            );\n\n            // Dynamic styling for specific levels\n            tick.UpdateTimeLevel(TimeLevelType.Year, level =>\n            {\n                level.FontSize = 14;\n                level.Foreground = Brushes.DarkBlue;\n                level.FontWeight = FontWeights.Bold;\n            });\n\n            tick.UpdateTimeLevel(TimeLevelType.Month, level =>\n            {\n                level.TextFormatter = dt => dt.ToString(\"MMM\");\n                level.HorizontalAlignment = HorizontalAlignment.Center;\n            });\n\n            // Highlight specific ticks\n            tick.IsHighlighted = DateTime.Now.Day % 7 == 0; // Highlight Sundays\n        }\n\n        #endregion\n\n        #region Performance Comparison\n\n        /// <summary>\n        /// Demonstrates performance improvements over the original implementation\n        /// </summary>\n        private void PerformanceComparison()\n        {\n            var stopwatch = System.Diagnostics.Stopwatch.StartNew();\n            \n            // Old way: Create 1000 individual MultiLevelTimeScaleTick controls\n            var oldTicks = new List<MultiLevelTimeScaleTick>();\n            for (int i = 0; i < 1000; i++)\n            {\n                var oldTick = new MultiLevelTimeScaleTick();\n                oldTick.SetTimeTexts(\n                    DateTime.Now.AddDays(i).Year.ToString(),\n                    $\"Q{(DateTime.Now.AddDays(i).Month - 1) / 3 + 1}\",\n                    DateTime.Now.AddDays(i).ToString(\"MMM\"),\n                    \"W1\", // Simplified\n                    DateTime.Now.AddDays(i).Day.ToString(),\n                    DateTime.Now.AddDays(i).ToString(\"HH:mm\")\n                );\n                oldTicks.Add(oldTick);\n            }\n            \n            var oldTime = stopwatch.ElapsedMilliseconds;\n            stopwatch.Restart();\n\n            // New way: Use rendering service with optimization\n            var newTicks = _renderingService.CreateTimeScaleTicks(\n                DateTime.Now,\n                DateTime.Now.AddDays(1000),\n                TimeSpan.FromDays(1),\n                60\n            );\n            \n            var newTime = stopwatch.ElapsedMilliseconds;\n            stopwatch.Stop();\n\n            Console.WriteLine($\"Old implementation: {oldTime}ms\");\n            Console.WriteLine($\"New implementation: {newTime}ms\");\n            Console.WriteLine($\"Performance improvement: {(double)oldTime / newTime:F1}x faster\");\n\n            // Clean up for accurate memory comparison\n            foreach (var tick in newTicks)\n            {\n                _renderingService.ReturnTimeScaleTick(tick);\n            }\n        }\n\n        #endregion\n\n        #region Migration Guide\n\n        /// <summary>\n        /// Shows how to migrate from the old MultiLevelTimeScaleTick to the new system\n        /// </summary>\n        private void MigrationExample()\n        {\n            // OLD WAY (original MultiLevelTimeScaleTick):\n            /*\n            var oldTick = new MultiLevelTimeScaleTick();\n            oldTick.YearText = \"2024\";\n            oldTick.MonthText = \"Jan\";\n            oldTick.DayText = \"15\";\n            oldTick.ShowYear = true;\n            oldTick.ShowMonth = true;\n            oldTick.ShowDay = true;\n            oldTick.ShowQuarter = false;\n            oldTick.ShowWeek = false;\n            oldTick.ShowTime = false;\n            oldTick.YearFontSize = 14;\n            oldTick.YearForeground = Brushes.DarkBlue;\n            oldTick.MonthFontSize = 12;\n            oldTick.MonthForeground = Brushes.DarkRed;\n            // ... 30+ more property settings\n            */\n\n            // NEW WAY (ImprovedMultiLevelTimeScaleTick):\n            var newTick = new ImprovedMultiLevelTimeScaleTick\n            {\n                DateTime = new DateTime(2024, 1, 15), // Single property instead of multiple text properties\n                Width = 80,\n                Height = 60\n            };\n\n            // Simplified level visibility\n            newTick.SetLevelVisibility(\n                (TimeLevelType.Year, true),\n                (TimeLevelType.Month, true), \n                (TimeLevelType.Day, true),\n                (TimeLevelType.Quarter, false),\n                (TimeLevelType.Week, false),\n                (TimeLevelType.Time, false)\n            );\n\n            // Theme-based styling instead of individual properties\n            newTick.ApplyTheme(TimeScaleTheme.CreateModern());\n\n            // Or custom styling for specific levels\n            newTick.UpdateTimeLevel(TimeLevelType.Year, level => \n            {\n                level.FontSize = 14;\n                level.Foreground = Brushes.DarkBlue;\n            });\n        }\n\n        #endregion\n    }\n}
